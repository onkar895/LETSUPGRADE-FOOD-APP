import File from "./util/File.mjs";
import * as url from "./util/url.mjs";
import defaultOptions from "./options/index.mjs";
import { merge as mergeOptions } from "./options/util.mjs";
import parseFn from "./parse/index.mjs";
import resolveFn, { resolveApiDOM as resolveApiDOMFn } from "./resolve/index.mjs";
import { readFile as readFileFn } from "./resolve/util.mjs";
import dereferenceFn, { dereferenceApiDOM as dereferenceApiDOMFn } from "./dereference/index.mjs";
export { url, File };
export { default as Parser } from "./parse/parsers/Parser.mjs";
export { default as Resolver } from "./resolve/resolvers/Resolver.mjs";
export { default as HttpResolver } from "./resolve/resolvers/HttpResolver.mjs";
export { default as ResolveStrategy } from "./resolve/strategies/ResolveStrategy.mjs";
export { default as DereferenceStrategy } from "./dereference/strategies/DereferenceStrategy.mjs";
export { default as options } from "./options/index.mjs";
export { merge as mergeOptions } from "./options/util.mjs";
export { default as Reference } from "./Reference.mjs";
export { default as ReferenceSet } from "./ReferenceSet.mjs";
export { DereferenceError, InvalidSelectorError, MaximumDereferenceDepthError, MaximumResolverDepthError, NotImplementedError, ParserError, PluginError, ResolverError, UnmatchedDereferenceStrategyError, UnmatchedResolveStrategyError, UnmatchedResolverError } from "./util/errors/index.mjs";
export const readFile = async (uri, options = {}) => {
  const mergedOptions = mergeOptions(defaultOptions, options);
  const file = File({
    uri: url.sanitize(uri)
  });
  return readFileFn(file, mergedOptions);
};
export const parse = async (uri, options = {}) => {
  const mergedOptions = mergeOptions(defaultOptions, options);
  return parseFn(uri, mergedOptions);
};
export const resolve = async (uri, options = {}) => {
  const mergedOptions = mergeOptions(defaultOptions, options);
  return resolveFn(uri, mergedOptions);
};
export const resolveApiDOM = async (element, options = {}) => {
  const mergedOptions = mergeOptions(defaultOptions, options);
  return resolveApiDOMFn(element, mergedOptions);
};
export const dereference = async (uri, options = {}) => {
  const mergedOptions = mergeOptions(defaultOptions, options);
  return dereferenceFn(uri, mergedOptions);
};
export const dereferenceApiDOM = async (element, options = {}) => {
  const mergedOptions = mergeOptions(defaultOptions, options);
  return dereferenceApiDOMFn(element, mergedOptions);
};